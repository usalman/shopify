{% comment %}
  Horizontal Scrollable Navigation (Dawn-compatible)
  - Uses a Shop-level metafield: namespace "custom", key "navigation_items"
  - Type: List of Metaobjects -> Definition: "nav_item"
  - Each nav_item has fields: label (single_line_text_field), link (url), icon (file_reference, optional), new_tab (boolean, optional)
{% endcomment %}

{% comment %} <pre>{{ nav_items | json }}</pre> {% endcomment %}

{% assign nav_items = shop.metafields.custom.navigation_items.value %}

<section class="section hsn" id="hsn-{{ section.id }}" aria-label="Horizontal navigation">
  <div class="hsn__inner page-width">
    {% if section.settings.heading != blank %}
      <h2 class="hsn__heading h2">{{ section.settings.heading }}</h2>
    {% endif %}

    

    <div class="hsn__wrap">
      <button class="button button--secondary hsn__btn hsn__btn--left" type="button" aria-label="Scroll left">
        <svg aria-hidden="true" focusable="false" width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.5 15l-5-5 5-5" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
      </button>
      <div class="hsn__scroller" id="hsn-track-{{ section.id }}">
        {% if nav_items != blank %}
          {% for item in nav_items %}
            {% assign label = item.label | default: item.title | default: 'Link' %}
            {% assign href = item.link %}
            {% assign new_tab = item.new_tab %}
            {% assign icon = item.icon %}

            <a class="hsn__pill" href="{{ href }}" {% if new_tab %}target="_blank" rel="noopener"{% endif %}>
              {% if icon != blank %}
                <span class="hsn__icon">
                  <img loading="lazy" src="{{ icon }}" alt="" width="64" height="64" />
                </span>
              {% endif %}
              <span class="hsn__label">{{ label }}</span>
            </a>
          {% endfor %}
        {% else %}
          <span class="hsn__empty">No navigation items yet. Add metaobjects to <em>Settings ▸ Custom data ▸ Shop</em> → <strong>custom.navigation_items</strong>.</span>
        {% endif %}
      </div>

      <button class="button button--secondary hsn__btn hsn__btn--right" type="button" aria-label="Scroll right">
        <svg aria-hidden="true" focusable="false" width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7.5 5l5 5-5 5" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
      </button>
    </div>
  </div>

  <style>
    /* Layout */
    /* Layout */
#hsn-{{ section.id }} .hsn__wrap {
  position: relative;
  padding-bottom: 4rem; /* yer aç scroll butonları için */
}

/* Scroller */
#hsn-{{ section.id }} .hsn__scroller {
  display: flex;
  gap: .6rem;
  overflow-x: auto;
  overscroll-behavior-x: contain;
  scroll-behavior: smooth;
  scroll-snap-type: x proximity;
  padding: .25rem 1rem;
  -webkit-overflow-scrolling: touch;
  scrollbar-width: none;
  pointer-events: auto;
}
#hsn-{{ section.id }} .hsn__scroller::-webkit-scrollbar { display: none; }

/* Pills */
#hsn-{{ section.id }} .hsn__pill {
  scroll-snap-align: start;
  display: inline-flex;
  align-items: center;
  gap: .5rem;
  padding: .8rem 1.2rem;
  border: 1px solid var(--color-foreground-20, rgba(0,0,0,.08));
  border-radius: 2rem;
  text-decoration: none;
  line-height: 1.2;
  font-size: 1.6rem;
  background: var(--color-background, #fff);
  transition: transform .15s ease, background-color .2s ease, border-color .2s ease;
}

/* Label - çok satırlı text için */
#hsn-{{ section.id }} .hsn__label {
  word-wrap: break-word;
  overflow-wrap: break-word;
  hyphens: auto;
  text-align: center;
  text-decoration: none;
}
#hsn-{{ section.id }} .hsn__pill:hover {
  transform: translateY(-1px);
}
#hsn-{{ section.id }} .hsn__pill:focus-visible {
  outline: 2px solid var(--color-foreground-55, rgba(0,0,0,.35));
  outline-offset: 2px;
}

/* Active pill */
#hsn-{{ section.id }} .hsn__pill.is-active {
  background: var(--color-foreground, #000);
  color: var(--color-background, #fff);
  border-color: var(--color-foreground, #000);
}

/* Icons - 2x boyut */
#hsn-{{ section.id }} .hsn__icon {
  display: inline-flex;
  width: 128px;
  height: 128px;
}
#hsn-{{ section.id }} .hsn__icon img {
  width: 128px;
  height: 128px;
  object-fit: contain;
}

/* Scroll Buttons - bottom right stack */
#hsn-{{ section.id }} .hsn__btn {
  position: absolute;
  right: 1rem;
  bottom: -3rem;
  z-index: 2;
  width: 40px;
  height: 40px;
  padding: 0;
  display: grid;
  place-items: center;
  border-radius: 999px;
  box-shadow: 0 2px 8px rgba(0,0,0,.07);
  background-color: white;
  cursor: pointer;
  pointer-events: auto;
}

.button {
  min-width: 50px;
}

#hsn-{{ section.id }} .hsn__btn--left {
  bottom: -3rem;
  right: 7rem;
}
#hsn-{{ section.id }} .hsn__btn[disabled] {
  opacity: .4;
  cursor: not-allowed;
}

/* Heading */
#hsn-{{ section.id }} .hsn__heading {
  margin-bottom: 1rem;
}

/* Empty state */
#hsn-{{ section.id }} .hsn__empty {
  display: inline-block;
  opacity: .6;
  padding: .6rem .9rem;
  border-radius: 1rem;
  border: 1px dashed var(--color-foreground-20, rgba(0,0,0,.1));
}

  </style>

  <script>
    (function() {
      const sectionId = '{{ section.id }}';
      const scroller = document.getElementById('hsn-track-' + sectionId);
      if (!scroller) return;

      const root = document.getElementById('hsn-' + sectionId);
      const btnPrev = root.querySelector('.hsn__btn--left');
      const btnNext = root.querySelector('.hsn__btn--right');

      const scrollAmount = Math.max(scroller.clientWidth * ({{ section.settings.scroll_ratio | default: 80 | times: 0.01 }}), 160);

      function updateButtons() {
        const maxScroll = scroller.scrollWidth - scroller.clientWidth;
        btnPrev.disabled = scroller.scrollLeft <= 0;
        btnNext.disabled = scroller.scrollLeft >= (maxScroll - 1);
      }

      function scrollByDir(dir) {
        scroller.scrollBy({ left: dir * scrollAmount, behavior: 'smooth' });
      }

      btnPrev && btnPrev.addEventListener('click', () => scrollByDir(-1));
      btnNext && btnNext.addEventListener('click', () => scrollByDir(1));
      scroller.addEventListener('scroll', updateButtons, { passive: true });
      window.addEventListener('resize', updateButtons);
      updateButtons();

      // Mouse wheel horizontal scrolling
      scroller.addEventListener('wheel', (e) => {
        // Yatay kaydırma için dikey wheel hareketini yataya çevir
        if (Math.abs(e.deltaY) > Math.abs(e.deltaX)) {
          e.preventDefault();
          scroller.scrollBy({
            left: e.deltaY * 0.5, // Scroll hızını ayarlayabilirsiniz
            behavior: 'smooth'
          });
        }
      }, { passive: false });

      // optional: mouse drag to scroll (desktop)
      let isDown = false, startX = 0, startLeft = 0, hasDragged = false;
      
      scroller.addEventListener('pointerdown', (e) => { 
        // Sadece scroller üzerinde tıklandığında drag başlat, link üzerinde değilse
        if (!e.target.closest('.hsn__pill')) {
          isDown = true; 
          startX = e.clientX; 
          startLeft = scroller.scrollLeft; 
          hasDragged = false;
          scroller.setPointerCapture(e.pointerId);
        }
      });
      
      scroller.addEventListener('pointermove', (e) => { 
        if (!isDown) return; 
        const dx = e.clientX - startX; 
        if (Math.abs(dx) > 5) { // 5px'den fazla hareket varsa drag olarak kabul et
          hasDragged = true;
        }
        scroller.scrollLeft = startLeft - dx; 
      });
      
      scroller.addEventListener('pointerup', (e) => { 
        if (isDown && hasDragged && e.target.closest('.hsn__pill')) {
          // Drag işlemi varsa ve link üzerindeyse, link click'ini engelle
          e.preventDefault();
        }
        isDown = false; 
        hasDragged = false;
      });
      
      scroller.addEventListener('pointercancel', () => { 
        isDown = false; 
        hasDragged = false;
      });

      // keyboard support
      scroller.setAttribute('tabindex', '0');
      scroller.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowRight') { e.preventDefault(); scrollByDir(1); }
        if (e.key === 'ArrowLeft') { e.preventDefault(); scrollByDir(-1); }
      });

      // active state management
      const pills = scroller.querySelectorAll('.hsn__pill');
      pills.forEach(pill => {
        pill.addEventListener('click', () => {
          pills.forEach(p => p.classList.remove('is-active'));
          pill.classList.add('is-active');
        });
      }); 
    })();
  </script>
</section>

{% schema %}
{
  "name": "Horizontal Scroll Nav",
  "tag": "section",
  "class": "section",
  "settings": [
    {"type": "text", "id": "heading", "label": "Heading", "default": "Browse"},
    {"type": "range", "id": "scroll_ratio", "label": "Scroll amount (%) of visible width", "min": 30, "max": 100, "step": 5, "unit": "%", "default": 80}
  ],
  "presets": [ {"name": "Horizontal Scroll Nav"} ]
}
{% endschema %}